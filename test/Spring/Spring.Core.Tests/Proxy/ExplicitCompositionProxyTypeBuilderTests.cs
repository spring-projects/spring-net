#region License

/*
 * Copyright ï¿½ 2002-2011 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#endregion

#region Imports

using System.Reflection;

using NUnit.Framework;

#endregion

namespace Spring.Proxy
{
	/// <summary>
	/// Unit tests for the CompositionProxyTypeBuilder class.
	/// </summary>
	/// <author>Rick Evans</author>
	[TestFixture]
	public sealed class ExplicitCompositionProxyTypeBuilderTests : CompositionProxyTypeBuilderTests
	{
		[Test]
		public void ExplicitInterfaceImplementation()
		{
            IProxyTypeBuilder builder = GetProxyBuilder();
            builder.TargetType = typeof(MultipleInterfaces);
            Type proxy = builder.BuildProxyType();
			Assert.IsNotNull(proxy, "The proxy generated by a (valid) call to BuildProxy() was null.");
			object foo = Activator.CreateInstance(proxy);
			Assert.IsTrue(foo is IBase);
			Assert.IsTrue(foo is IInherited);

            Type fooType = foo.GetType();
		    MethodInfo[] methods = fooType.GetMethods(BindingFlags.DeclaredOnly);
            Assert.AreEqual(0, methods.Length, "Methods array should be empty.");

            methods = fooType.GetMethods(BindingFlags.DeclaredOnly | BindingFlags.NonPublic | BindingFlags.Instance);
            Assert.AreEqual(2, methods.Length, "Methods array should have two elements.");
            Assert.IsTrue(methods[0].Name.IndexOf('.') > 0, "Method should have '.' in the name");
            Assert.IsTrue(methods[1].Name.IndexOf('.') > 0, "Method should have '.' in the name");

		}

		protected override IProxyTypeBuilder GetProxyBuilder()
		{
			CompositionProxyTypeBuilder pb = new CompositionProxyTypeBuilder();
            pb.ExplicitInterfaceImplementation = true;
            return pb;
		}
	}
}